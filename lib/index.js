// Generated by CoffeeScript 1.6.3
(function() {
  var colors, exec, fork, fs, path, pidFile, _ref;

  path = require('path');

  fs = require('fs');

  _ref = require('child_process'), exec = _ref.exec, fork = _ref.fork;

  colors = require('colors');

  pidFile = path.resolve('.compile.pid');

  task('compile', "once compile coffee scripts to javascript files", function(options) {
    var child;
    child = fork(path.resolve(__dirname, 'cake-dog'), ['-o', 'lib', '-c', 'src']);
    return child.on('exit', function(err) {
      if (err) {
        return console.log('Error! Compile error'.red);
      } else {
        return console.log('Compile finish'.green);
      }
    });
  });

  task('compile:watch', 'real-time compile coffee scripts to javascript files', function(options) {
    var _watch;
    _watch = function() {
      var child;
      child = fork(path.resolve(__dirname, 'cake-dog'), ['quiet', '-w', '-o', 'lib', '-c', 'src']);
      return fs.writeFile(pidFile, child.pid, function(err, result) {
        console.log(("Start watching in process: " + child.pid).green);
        return process.exit();
      });
    };
    return fs.readFile(pidFile, function(err, result) {
      var pid;
      if ((err != null ? err.code : void 0) === 'ENOENT' || (result != null ? result.length : void 0) < 1) {
        return _watch();
      }
      pid = result != null ? result.toString().trim() : void 0;
      return exec("ps -p " + pid + " | grep -v 'grep' | grep 'cake-dog'", function(err, result) {
        if ((err != null) || (result != null ? result.trim().length : void 0) < 1) {
          console.log('Warn! Process was exited unexpectedly last time'.yellow);
          return _watch();
        } else {
          return console.log('Error! Process is running now'.red);
        }
      });
    });
  });

  task('compile:unwatch', 'stop compile coffee scripts to javascript files', function(options) {
    return fs.readFile(pidFile, function(err, result) {
      var e, pid;
      if ((err != null) || (result != null ? result.length : void 0) < 1) {
        return console.log('Error! Pid file not found'.red);
      }
      pid = result.toString().trim();
      try {
        process.kill(pid, 'SIGTERM');
        return fs.unlink(pidFile, function(err) {
          if (err != null) {
            console.log("Error! Can not remove pid file".red);
            return console.log(("Message: " + (err.toString())).grey);
          } else {
            return console.log('Watch process stoped'.green);
          }
        });
      } catch (_error) {
        e = _error;
        console.log(("Error! Can not stop process " + pid).red);
        return console.log(("Message: " + e).grey);
      }
    });
  });

}).call(this);
